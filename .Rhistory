dir(0)
dir()
?list.files
args((list.files))
args(list.files)
old.dir  <- list.files
old.dir <- getwd()
?dir.create()
testdir <- dir.create()
testdir <- dir.create(old.dir)
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.r")
file.create("mytest.R")
ls()
list.files()
files.exis("mytest.R")
files.exist("mytest.R")
files.exists("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
?file.rename("")
file.rename("mytest.R", "mytest2.R")
file.copt("mytest2.R", "mytest3.R")
file.copy("mytest2.R", "mytest3.R")
file.path()
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2/testdir3"))
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir")
unlink("testdir", recursive = TRUE)
rm(list = ls())
swirl()
library(swirl)
swirl()
head(flags)
dim((flags))
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <-flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique0
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
tablw(flags$landmass)
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, summary)
tapply(flags$population, flags$landmass, summary)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(solve) m <<- solve
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
rm(list = ls())
library(datasets)
data(iris)
?iris
sapply(iris, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
data(mtcars)
?mtcars
library(datasets)
data(mtcars)
rm(list = ls())
library(datasets)
data(mtcars)
class(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
debug(ls)
ls
?debug
1-9
exit
clear
q
d
d
d
rm(list = ls())
datasets(iris)
library(datasets)
data(iris)
?iris
undebug(ls)
?undebug
Q
library(datasets)
data(iris)
rm(list = ls())
library(datasets)
rm(list = ls())
library(datasets)
data(iris)
iris
sapply(iris, mean)
tapply(iris,Species mean)
tapply(iris,Species, mean)
tapply(iris,iris?Species, mean)
tapply(iris?Sepal.Length,iris?Species, mean)
tapply(iris$Sepal.Length,iris$Species, mean)
library(datasets)
data(mtcars)
tapply(mtcars$cyl, mtcars$hp, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
rm(list = ls())
makeCacheMatrix <- function(m = matrix()) {
i <- NULL
set <- function(y) {
m <<- y
i <<- NULL
}
get <- function() m
setInverse <- function(inv) i <<- inv
getInverse <- function() i
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
i <- x$getInverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
m <- x$get()
i <- solve(m, ...)
x$setInverse(i)
i
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
library(swirl)
swirl()
data(cars)
?cars
head(cars0)
head(cars)
plot(cars)
?plot
plot(speed, dist)
plot(cars, speed, dist)
lot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed, xlab="Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab="Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab="Speed", main="My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(xlim=c(10,15))
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
?split
x <- list(2, "a", "b", TRUE)
w <- x[[1]]
class(w)
?download.file
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv )
download.file(url=https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv )
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv" )
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="q1Data" )
q1 <- download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="q1Data" )
q1
q1DF <- read.csv("q1Data.csv")
q1DF <- read.csv("q1Data")
?count
q1ANS <- subset(q1DF, value ==24)
q1ANS <- subset(q1DF, val ==24)
q1ANS <- subset(q1DF, VAL ==24)
View(`q1ANS`)
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx ", destfile="q3Data" )
?read
?read.csv
read.table(file="q3Data")
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx ", destfile="q3Data.xlsx" )
q3Df <- read.table("q3Data.xlsx")
View(`q3Df`)
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx ", destfile="q3Data.xlsx", method="curl" )
?curl
??curl
library(xlsx)
install(xlsx)
?install
install.packages("xlsx")
install.packages(curl)
install.packages("curl")
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx ", destfile="q3DataX.xlsx", method="curl" )
library(curl)
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx ", destfile="q3DataX.xlsx", method="curl" )
library(xlsx)
read.xlsx("q3Data.xlsx")
?read.xlsx
q3DF <- read.xlsx(file="q3Data.xlsx", sheetIndex=1,startRow=18, endRow=23,colIndex=c(7:15))
colI <-c(7:15)
q3DF <- read.xlsx(file="q3Data.xlsx", sheetIndex=1)
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx ", destfile="q3DataX.xlsx", method="wb" )
q3DF <- read.xlsx(file="q3Data.xlsx", sheetIndex=1,startRow=18, endRow=23,colIndex=colI)
install.packages("rJava")
install.packages("rJava")
q3DF <- read.xlsx(file="q3Data.xlsx", sheetIndex=1,startRow=18, endRow=23,colIndex=colI)
library(xlsx)
q3DF <- read.xlsx(file="q3Data.xlsx", sheetIndex=1,startRow=18, endRow=23,colIndex=colI)
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx ", destfile="q3DataX.xlsx", mode="wb" )
q3DF <- read.xlsx(file="q3Data.xlsx", sheetIndex=1,startRow=18, endRow=23,colIndex=colI)
library(xlsx)
q3DF <- read.xlsx(file="q3Data.xlsx", sheetIndex=1,startRow=18, endRow=23,colIndex=colI)
q3DF <- read.xlsx(file="q3DataX.xlsx", sheetIndex=1,startRow=18, endRow=23,colIndex=colI)
colI <- c(7:15)
q3DF <- read.xlsx(file="q3DataX.xlsx", sheetIndex=1,startRow=18, endRow=23,colIndex=colI)
dat <- q3DF
q3Ans <- sum(dat$Zip*dat$Ext,na.rm=T)
library(xml)
install.packages("xml")
install.packages("XML")
library(XML)
q5XML <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=TRUE)
?xmlTreeParse
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
q5XML <- xmlTreeParse(fileURL, useInternal=TRUE)
q5XML <- xmlTreeParse(fileURL)
fileURL <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
q5XML <- xmlTreeParse(fileURL, useInternal=TRUE)
q5XML
zips <- xpathSApply(fileURL, "//li[@class='zipcode']", xmlValue)
?xpathApply
zips <- xpathSApply(q5XML, "//li[@class='zipcode']", xmlValue)
zips <- xpathApply(q5XML, "//li[@class='zipcode']", xmlValue)
zips
zips <- xpathApply(q5XML, "//zipcode]", xmlValue)
zips <- xpathApply(q5XML, "//zipcode", xmlValue)
zips <- xpathSApply(q5XML, "//zipcode", xmlValue)
q4Ans <- subset(zips, zips==21231)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "q5Data.csv")
?fread
??fread
DT <- read.csv("q5Data.csv")
Run1000 <- function() {
# Start the clock!
ptm <- proc.time()
# Loop through the vector, adding one
for (i in 1:1000){
DT[,mean(pwgtp15),by=SEX]
}
# Stop the clock
proc.time() - ptm
}
t <- Run1000
t <- Run1000()
DT[,mean(pwgtp15),by=SEX]
View(DT)
tapply(DT$pwgtp15,DT$SEX,mean)
m <- tapply(DT$pwgtp15,DT$SEX,mean)
Run1000 <- function() {
# Start the clock!
ptm <- proc.time()
# Loop through the vector, adding one
for (i in 1:1000){
k <- tapply(DT$pwgtp15,DT$SEX,mean)
}
# Stop the clock
proc.time() - ptm
}
b <- Run1000
b <- Run1000()
b
Run1000 <- function() {
# Start the clock!
ptm <- proc.time()
# Loop through the vector, adding one
for (i in 1:1000){
k <- mean(DT$pwgtp15,by=DT$SEX)
}
# Stop the clock
proc.time() - ptm
}
c <- Run1000()
c
Run1000 <- function() {
# Start the clock!
ptm <- proc.time()
# Loop through the vector, adding one
for (i in 1:1000){
k <- mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
}
# Stop the clock
proc.time() - ptm
}
d <- Run1000()
Run1000 <- function() {
# Start the clock!
ptm <- proc.time()
# Loop through the vector, adding one
for (i in 1:1000){
k <- sapply(split(DT$pwgtp15,DT$SEX),mean)
}
# Stop the clock
proc.time() - ptm
}
e <- Run1000()
e
Run1000 <- function() {
# Start the clock!
ptm <- proc.time()
# Loop through the vector, adding one
for (i in 1:1000){
k <- rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
}
# Stop the clock
proc.time() - ptm
}
f <- Run1000()
Run1000 <- function() {
# Start the clock!
ptm <- proc.time()
# Loop through the vector, adding one
for (i in 1:1000){
k <- DT[,mean(pwgtp15),by=SEX]
}
# Stop the clock
proc.time() - ptm
}
a <- Run1000()
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT$pwgtp15,by=DT$SEX)
tapply(DT$pwgtp15,DT$SEX,mean)
sapply(split(DT$pwgtp15,DT$SEX),mean)
DT[,mean(pwgtp15),by=SEX]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
owMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2];
rowMeans(DT)[DT$SEX==1];
Run1000 <- function() {
# Start the clock!
ptm <- proc.time()
# Loop through the vector, adding one
for (i in 1:1000){
k <- tapply(DT$pwgtp15,DT$SEX,mean)
}
# Stop the clock
proc.time() - ptm
}
aT <- Run1000
aT <- Run1000()
Run1000 <- function() {
# Start the clock!
ptm <- proc.time()
# Loop through the vector, adding one
for (i in 1:1000){
k <- sapply(split(DT$pwgtp15,DT$SEX),mean)
}
# Stop the clock
proc.time() - ptm
}
aS <- Run1000()
Run1000 <- function() {
# Start the clock!
ptm <- proc.time()
# Loop through the vector, adding one
for (i in 1:1000){
k <- mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
}
# Stop the clock
proc.time() - ptm
}
aMean <- Run1000()
myDat <- read.table("household_power_consumption.txt", sep = ";",
header= TRUE,
stringsAsFactors = FALSE,
na.strings="?")
setwd("~/R/ExData_Plotting1/ExData_Plotting1")
myDat <- read.table("household_power_consumption.txt", sep = ";",
header= TRUE,
stringsAsFactors = FALSE,
na.strings="?")
FebDat <- myDat[myDat$Date=="1/2/2007" | myDat$Date=="2/2/2007",]
## Create a variable with both date and time
n <- as.character(FebDat$Time)
w <- FebDat$Date
x <- paste(w, n)
z <- strptime(x,format="%m/%d/%Y %H:%M:%S")
FebDat$DateTime <- z
lines(FebDat$Global_active_power)
lines(FebDat$Global_active_power, FebDat$DateTime)
?plot
plot(FebDat$Global_active_power, FebDat$DateTime)
plot(FebDat$DateTime, FebDat$Global_active_power)
FebDat <- myDat[myDat$Date=="1/2/2007" | myDat$Date=="2/2/2007",]
## Create a variable with both date and time
n <- as.character(FebDat$Time)
w <- FebDat$Date
x <- paste(w, n)
z <- strptime(x,format="%d/%m/%Y %H:%M:%S")
FebDat$DateTime <- z
plot(FebDat$DateTime, FebDat$Global_active_power)
lines()
lines(FebDat$DateTime, FebDat$Global_active_power)
?plot
plot(FebDat$DateTime, FebDat$Global_active_power, type="l", ylab="Global Active Power (kilowatts)", xlab="" )
plot2 <- function() {
## Produce Plot 1 for Course Project1
## Assume file has been downloaded
## Read from downloaded dataset
myDat <- read.table("household_power_consumption.txt", sep = ";",
header= TRUE,
stringsAsFactors = FALSE,
na.strings="?")
## Subset based on two days of interest
FebDat <- myDat[myDat$Date=="1/2/2007" | myDat$Date=="2/2/2007",]
## Create a variable with both date and time
n <- as.character(FebDat$Time)
w <- FebDat$Date
x <- paste(w, n)
z <- strptime(x,format="%d/%m/%Y %H:%M:%S")
FebDat$DateTime <- z
##Open graphical device
png(filename = "plot2.png",
width = 480,
height = 480,
units = "px",
pointsize = 12)
##Produce histogram
plot(FebDat$DateTime, FebDat$Global_active_power, type="l", ylab="Global Active Power (kilowatts)", xlab="" )
##Close graphical device
dev.off()
}
plot2()
